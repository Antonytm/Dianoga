<!--
	Configures Dianoga to optimize PNG images
	By default this uses the PNGOptimizer library, which is fairly fast and can operate in memory.
	You may also enable quantization, which can result in larger file size savings at the cost of being lossy
	(usually a non-noticeable image quality reduction)
-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<sitecore>
		<pipelines>
			<dianogaOptimize>
				<processor type="Dianoga.Processors.Pipelines.DianogaOptimize.ExtensionBasedOptimizer, Dianoga">
					<Extensions>png</Extensions>
					<Pipeline>dianogaOptimizePng</Pipeline>
				</processor>
			</dianogaOptimize>

			<!-- 
				DIANOGA OPTIMIZE PNG
				Pipeline that defines how PNGs get optimized. Multiple optimizers may run over the same file.
				Optimizers should derive from OptimizerProcessor or CommandLineToolOptimizer.
				
				Optimizers are expected to close the stream they receive under any circumstances!
			-->
			<dianogaOptimizePng>
				<!-- 
				Enable this processor to allow PNG quantization (a lossy operation) in addition to PNG optimizer.
				Run quantization first if you are doing both.
				<processor type="Dianoga.Optimizers.Pipelines.DianogaPng.PngQuantOptimizer, Dianoga" />-->
				<processor type="Dianoga.Optimizers.Pipelines.DianogaPng.PngOptimizer, Dianoga">
					<DllPath>/Dianoga Tools/PNGOptimizer/PNGOptimizerDll.dll</DllPath>
				</processor>
			</dianogaOptimizePng>
		</pipelines>
	</sitecore>
</configuration>